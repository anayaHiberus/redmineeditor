# create release with linux and windows zips
name: Generate release

on:
  # run when the version file changes
  push:
    branches:
      - 'main'
    paths:
      - 'src/main/resources/com/hiberus/anaya/redmineeditor/version'

  # allow manual too
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: prepare_release
        name: Create draft release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRERELEASE: ${{ github.ref_name != 'main' && '--prerelease' || '' }}
        run: |
          # prepare files
          VERSION=`cat src/main/resources/com/hiberus/anaya/redmineeditor/version`
          CHANGELOG=`python -c "with open('src/main/resources/com/hiberus/anaya/redmineeditor/changelog.txt','r') as file: print(file.read().split('\n\n')[0])"` # TODO: use awk or pure bash
          
          # prepare tag
          TAG="v$VERSION"
          
          # clear previous release, if any
          gh release delete $TAG --cleanup-tag --yes || true
          
          # create draft release
          gh release create $TAG --draft --title "Version $VERSION" --notes "$CHANGELOG" $PRERELEASE
          
          # output tag for next steps
          echo "tag=$TAG" >> $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.prepare_release.outputs.tag }}

  build:
    needs: prepare
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build zip with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jlinkZip

      - name: Upload zip to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ needs.prepare.outputs.tag }} ${{ matrix.os == 'windows-latest' && '(get-item .\build\*.zip)' || './build/*.zip' }}

  finish:
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.prepare.outputs.tag }}
        run: gh release edit $TAG --draft=false
