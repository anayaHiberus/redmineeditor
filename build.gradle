plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
}

group 'com.hiberus.anaya'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = '17'
targetCompatibility = '17'

mainClassName = "$moduleName/com.hiberus.anaya.redmineeditor.Main"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.hiberus.anaya.redmineeditor'
    mainClass = 'com.hiberus.anaya.redmineeditor.Main'
}

javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.web', 'javafx.fxml']
}

//noinspection SpellCheckingInspection
dependencies {
    implementation 'org.json:json:20220320'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10'
    // implementation 'com.taskadapter:redmine-java-api:4.0.0.rc4' // useless api, cant search using multiple filters
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages',
               '--add-modules', [
                       'jdk.crypto.ec',  // crypto: fixes handshake error,
                       'jdk.localedata',  // localedata: allows non-english locales (for evidences)
                       'jdk.accessibility' // accessibility: to avoid exception when using accesibility modules
               ].join(',')
    ]

    var appName = 'RedmineEditor'
    imageDir = file("$buildDir/$appName")
    imageZip = file("$buildDir/$appName-${org.gradle.internal.os.OperatingSystem.current().isWindows() ? 'windows' : 'linux'}.zip")
    launcher {
        name = appName
    }

    mergedModule {
        additive = true
        forceMerge "kotlin" // https://issueexplorer.com/issue/beryx/badass-jlink-plugin/165
    }
    launcher {
        noConsole = true
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

tasks.jlink.doLast {
    project.logger.lifecycle "Patching output folder"
    var imageDir = jlink.imageDir.get()

    // copy configurations
    copy {
        from "$buildDir/../conf"
        from("${buildDir}/../conf_personal") { duplicatesStrategy = DuplicatesStrategy.INCLUDE }
        into "$imageDir/conf"
    }

    // fix launchers
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        // windows
        copy {
            from "$buildDir/../launcher/RedmineEditor.bat"
            into imageDir
        }
        delete files(
                "$imageDir/bin/RedmineEditor",
        )
    } else {
        // linux
        copy {
            from "$buildDir/../launcher/RedmineEditor"
            into imageDir
        }
        delete files(
                "$imageDir/bin/RedmineEditor.bat"
        )
    }
}
